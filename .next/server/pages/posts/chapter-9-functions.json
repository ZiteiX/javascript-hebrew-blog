{"pageProps":{"post":{"content":"\n# פונקציות\n\nאז פונקציות בשפת תכנות זה לא בדיוק מה שלמדנו כשהיינו בתיכון.  \nכן בפונקציה אנחנו יכולים (לא חייבים) לקבל קלט כלשהו, לבצע עליו חישוב מסוים ולהחזיר פלט.  \nפונקציות קיימות בכל שפת תכנות, אני אוהב להגדיר אותם בתור \"קוד מסוים שאני אקרא לו מתי וכמה פעמים שאני צריך\".  \nאני חייב להדגיש שכאשר אנחנו מגדירים פונקציה היא לא נקראת מיידית אלא נשמרת בזכרון ורק כאשר אנחנו נבצע קריאה לפונקציה - היא תופעל.\n\n### הגדרת פונקציה:\n\nיש כמה דרכים להגדיר פונקציה ב JS.  \nכרגע נעבור על הדרך הקלאסית, באמצעות המילה השמורה\n**function**\n\n```js\nfunction myFirstFunction(myName) {\n  //here is the body of the function\n}\n```\n\n_שימו לב!_  \nשם הפונקציה כמו שם משתנה (מתחיל באות קטנה וכו').  \nבתוך ה ( ) אלו הם הארגמונטים שהפונקציה מקבלת, הפונקציה הזו מקבלת ארגומנט אחד,  \nבשם myName.  \nמשתנה זה יהיה זמין\n**רק**\nבגוף הפונקציה.  \nכל מה שבין ה- { .. } הוא גוף הפונקציה , נקרא גם\n**Scope (נרחיב בהמשך!)**  \nפונקציה לא מסתיימת ב ; (אך יש מתכנתים שכן כותבים, אני לא רואה סיבה).\n\n_וידוי נאות:_  \n\\*לאורך המדריך תקבלו כמה וידויים מעניינים.  \n**לא חייב**\nלסיים כל שורה באמצעות ה - ( ; )\nJS לעומת שפות אחרות שבהן אכן חייב.\n\n### קריאה לפונקציה:\n\n```js\nconst name = \"David\";\nmyFirstFunction(name);\n```\n\nכמובן ששם המשתנה שאנחנו שולחים לפונקציה לא צריך להיות זהה למשתנה בהגדרת הפונקציה!  \nכרגע הפונקציה שלנו לא עושה כלום.  \nאז בואו נהפוך את הפונקציה לשימושית ונוסיף ל\n_גוף הפונקציה_\nפעולה מסוימת.  \nהפעם הפעולה תהיה להגיד שלום למשתנה שהפונקציה קיבלה!\n\n```js\nfunction myFirstFunction(myName) {\n  console.log(\"Hello\" + name);\n}\n```\n\nעכשיו כשיש לפונקציה מהות, בואו נקרא לה שוב.\n\n```js\nconst name = \"David\";\n\nmyFirstFunction(name);\n```\n\n**אז מה עשינו פה?**  \nכתבנו מחרוזת (כל החלק שמוקף במרכאות) ולאחריה הוספנו משתנה, אך חייב להפריד ביניהם, כרגע הפרדנו באמצעות ה \" , \" אך באותה מידה אפשר להשתמש ב \" + \".\nשימו לב! שקריאה לפונקציה חייבת להיות עם ( ) לאחר שם הפונקציה.  \n( גם כשהיא ללא ארגומנטים!! )\n\nהמילה השמורה\n**return**\nבדרך כלל נהוג לסיים פונקציות עם ערך החזרה באמצעות המילה,  \nנעשה זאת באמצעות\nה - return  \nדוגמא:\n\n```js\nfunction add(num1, num2) {\n  return num1 + num2;\n}\n```\n\nפונקציה זו תבצע פעולת חיבור בין שני משתנים ותחזיר את הערך של החיבור שלהם.  \n**לא רק מספרים אפשר לחבר!**\nנעבור על זה בהמשך.\n\nלא ייקרה כלום אם נקרא לפונקציה ככה:\n\n```js\nadd(1, 2);\n```\n\nהפונקציה הזו תחזיר את הערך 3 אבל הוא פשוט לא יישמר בשום מקום.  \nאפשר לשמור\n**ערך החזרה של הפונקציה**\nבמשתנה:\n\n```js\nconst returnValue = add(1, 2);\n```\n\n**מה שייקרה בעצם:**\n\n1. הקומפיילר ייקרא לפונקציה add.\n2. ישלח את הארגומנטים 1,2.\n3. יבצע את החישוב ויחזיר את הערך למשתנה שהגדרנו.\n\nאז בעצם זה בידיוק כמו לכתוב כך:\n\n```js\nconst returnValue = 1 + 2;\n```\n","slug":"chapter-9-functions","author":"דוד אבן חיים","date":"2021-06-03","image":"chapter-9-functions.jpg","isFeatured":true,"summary":"פונקציות - לא בידיוק מה שלמדנו בתיכון","time":11,"title":"פרק 9: פונקציות"},"nextPostSlug":"finished"},"__N_SSG":true}