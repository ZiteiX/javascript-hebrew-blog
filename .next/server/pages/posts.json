{"pageProps":{"posts":[{"content":"\n# אז למה בעצם ללמוד ג׳אווה סקריפט?\n\nג׳אווה סקריפט היא שפה שאפשר לעשות איתה הכל, למעשה האתר שאתם נמצאים בו כרגע נכתב כולו בשפה הזו, אפילו האפליקציה האחרונה שהשתמשתם בטלפון (ניחוש מושכל) נכתבה ברובה בג׳אווה סקריפט.\n\nבעצם בכל פעם שאתם מבקרים באתר שעושה קצת יותר מפשוט להציג תוכן סטטי שלא משתנה וכדי לגרום לאתר להיראות אטרקטיבי ודינמי,\nסביר להניח שהם השתמשו בג׳אווה סקריפט.\n\nאפליקציות מובייל כמו פייסבוק, אינסטגרם נטפליקס ואפילו קאנדי קראש,\nנכתבו בעזרת ג׳אווה סקריפט!\n\n#### - בהמשך אכתוב JS שפירושו כמובן JavaScript\n\nטוב, עכשיו בתקווה שהצלחתי לשכנע אותם ב״למה״ ללמוד JS\nנתעסק כרגע ב״איך״.\nהבלוג יחולק בצורה כזו שכל פוסט לא יהיה ארוך מידי ויהיו כמה חידות בהמשך\n(עם פתרון)\n\nהלמידה האמיתית תתבצע\n**בתרגול!**\nולכן חשוב לנסות לפתור לבד ו״לשבור את הראש״ עד שתגיעו לפתרון.\n\n**- ההסברים יהיו כולם בעברית ולא צריך שום ידע באנגלית**\n","slug":"chapter-0-getting-started-with-javascript","author":"דוד אבן חיים","date":"2021-09-13","image":"chapter-0-getting-started-with-javascript.jpg","isFeatured":true,"summary":"ג׳אווה סקריפט - משפות התכנות הכי נפוצות בעולם","time":4,"title":"פרק 0: מה זה JavaScript"},{"content":"\n**_פרק 1: היכרות_**\n\nטוב, כדי לא לשעמם אותכם על ההתחלה בהתקנה של כל מיני תוכנות לא מובנות, נתחיל בכתיבת קוד ב״סביבת עבודה״ ראשונית.\nתכנסו לגוגל (או כל עמוד אחר באינטרנט)\n\nלחצן ימני -->\n**בדיקה או inspect**\nאם הדפדפן שלכם באנגלית\n\n![הגעה לקונסול מכל עמוד בגוגל כרום](inspect-site.png)\n\nנעבור לעמודה ״הקונסול״ וכבר יהיה אפשר להתחיל לכתוב קוד!\n\n![קונסול - תחילת כתיבת קוד](console.png)\n\nשימו לב, בעמודת הקונסול כל פעם שנלחץ ״אנטר״ המערכת תחזיר לנו תשובה\nלשורה שכתבנו.\n\nנסו לכתוב את שורת הקוד כפי שהיא בתמונה ולחצו אנטר לאחר מכן.\n\n```js\ntrue === \"true\";\n```\n\nתרגום זריז\nאמת === ״אמת״\nמחזיר את התשובה שקר!\nמה?\n\nאז בעצם זה אחד החלקים היותר מעניינים בשפות תכנות\nוגם מה שמביא אותנו לנושא הבא שנדבר עליו:\n\n_סוגי משתנים_\n","slug":"chapter-1-what-is-javascript","author":"דוד אבן חיים","date":"2021-05-17","image":"chapter-1-what-is-javascript.jpeg","isFeatured":false,"summary":"לכתוב קוד זה לא כזה מפחיד","time":5,"title":"פרק 1: להתחיל לכתוב קוד"},{"content":"\n# משתנים\n\nאז במתמטיקה בתיכון למדנו על המשתנה x והוא יכל להחזיק כמות בלתי מוגבלת של ערכים (מספריים) גם ב js יש משתנים כמו בכל שפת תכנות אחרת.\n\nאז איך מגדירים?\n\n```js\nlet myName;\n```\n\nבאמצעות המילה השמורה\n**_let_**\nהגדרנו משתנה ״השם שלי״, שימו לב שסיימנו את השורה עם\n**( ; )**\n\nכרגע יצרנו משתנה ללא ערך.\nאפשר להקצאות לו ערך באמצעות =\n\n```js\nmyName= ‘David’;\n```\n\nעכשיו למשתנה שלנו יש ערך, המחרוזת ‘David’ !  \nכרגע למדנו על משתנה, שכפי ששמו מציין יכול להשתנות תמיד.  \nיש לנו עוד דרך להגדיר \"משתנה\" שמוגדר באמצעות\n**const**\n, בא מהמילה Constant, שזה קבוע.\nאז משתנה שלא יכול להשתנות, למה? יש ערכים שצריך להצהיר שהם לא אמורים להשתנות.\n\nדוגמא:\nconst secondsInMinute = 60;\nמס' השניות בדקה לא יישתנה לעולם ולכן נגדיר אותו בתור קבוע.\n\nלערך קבוע יש כמה חוקים:\n-חייב להיות מאותחל עם ערך!\n\nאם ננסה לעשות:\nconst secondsInMinute ;\nנקבל שגיאה!\n\n-**אי אפשר לשנות אותו במשך הקוד! ולכן: שימוש בקבועים כשאפשר יהיה תכנות בטוח יותר!**\n\n#### מוסכמות בשפה\n\nאז בשפת תכנות כמו בכל שפה גם יש מוסכמות על המון דברים, כרגע נעבור על כמה חשובים :\n\n1. **_משתנה שמוגדר_**\n   יתחיל באות קטנה וכאשר שמו מכיל כמה מילים כל מילה חדשה תתחיל באות גדולה:\n\n```js\nlet myName = ‘David’;\nlet myAge = 23\nlet myFavoriteSport = ‘Football’\n```\n\n2. **_משתנה קבוע_**\n   ייכתב באותיות גדולות, כאשר ההפרדה בין מילים תהיה באמצעות\n\n   ```js\n   const SECONDS_IN_MINUTE = 60;\n   ```\n\n   אי אפשר לעשות רווח בין מילים כאשר מגדירים משתנה ולכן משתמשים בקו תחתון ( \\_ )\n\n3. **_שמות משתנים_**\n   צריכים להיות כמה שיותר ברורים! אני אמשיך ואדגיש זאת לאורך הבלוג.\n","slug":"chapter-2-variables","author":"דוד אבן חיים","date":"2021-05-18","image":"chapter-2-variables.jpg","isFeatured":false,"summary":"משתנה - לא מפחיד כמו שהיה בתיכון","time":7,"title":"פרק 2: משתנים"},{"content":"\n# סוגי משתנים\n\nבjs\nסוגי המשתנים הם לא הכי ״מורגשים״ כמו בשפות אחרות, מי שמכיר שפות כמו c יכול להעיד על כך כי בעצם\n**כל הגדרה של משתנה מכל סוג**\nיוגדר באמצעות let / const כפי שלמדנו עד עכשיו  \n(אמנם יש עוד דרך להגדיר משתנה אך היא ישנה נדבר עליה בהמשך)\n\nאבל עדיין, אכן יש סוגי משתנים ״מאחורי הקלעים״ של השפה:\n\n![טבלת סוגי המשתנים](variables-type-table.png)\n\nיש עוד שני סוגי משתנים חשובים מאוד שנדבר ונשתמש בהם בהמשך, אובייקטים ומערכים.\n\nכדי לצבור קצת אינטואיציה נשתמש בעוד מילת מפתח\n**typeof variable**\nבתרגום חופשי ״הסוג של״\nזו בעצם פעולה שתחזיר את הסוג של המשתנה variable כלשהו  \nנשתמש בו בקונסול בצורה כזו:\n\n![שימוש בסוג של](console.png)\n\nמה לדעתכם יהיה הפלט אם נרשום\n\n```js\ntypeof null;\n```\n\nאז למרות שההיגיון אומרת שנקבל חזרה null\nקיבלנו משהו מוזר שנקרא:\n\"object\"\nזהו סוג משתנה חדש! שלא דיברנו עליו אבל אנחנו נתעסק בו המון בעתיד.\n\n**_עובדה לא חשובה_**  \nכששאלות את הגוף שמנהל את js\nלמה בעצם עם כל השדרוגים שהשפה עברה, לא השתנה הסוג של null  \nהתשובה שלהם הייתה ברורה: **_״האינטרנט ייקרוס״_**  \nאם תרצו לקרוא עליהם עוד:\n\n[ECMA-Script](https://he.wikipedia.org/wiki/ECMAScript)\n\nכדי להמשיך לצבור אינטואיציה נכיר סימן חדש\nסימן ההשוואה: ( == )  \nשקיים בכל שפות התכנות.\nנסו לרשום בקונסול:\n\n```js\n5 == \"5\";\n```\n\nשימו לב ש 5 הוא מסוג “number” והשני מסוג “string”.\nאך למרות השוני שורה זו היא true!\n\nאני אפסיק כאן ואגיד, שב - JS ב 99% מהמצבים אנחנו לא נשתמש ב ( == ) !\nזה נחשב תכנות לא בטוח.\nלמה?\nכי כמו שראינו 5 == ״5״ למרות שהם לא מאותו סוג.  \nמאחורי הקלעים מתבצעת המרה כך ששני ה 5-ים יהיו מאותו הסוג ( number או string ) ורק לאחר ההמרה מתבצעת בדיקה, האם ערכם שווה.\n\nמעכשיו, אנחנו נשתמש במשהו שמיוחד ל js - ( === ).\nהבדיקה הזו היא בטוחה ותחזיר אמת אם ורק אם שני המשתנים שנבדוק יהיו מאותו סוג + אותו ערך.\nולכן מה לדעתכם יהיה הפלט של השורה\n\n```js\n5 === \"5\";\n```\n\nהשורה הזו תחזיר false\nבגלל שאומנם הערך שווה אך הסוג לא שווה.\n","slug":"chapter-3-variables-types","author":"דוד אבן חיים","date":"2021-05-18","image":"chapter-3-variables-types.jpg","isFeatured":false,"summary":"סוגי משתנים הם חלק מכל שפת תכנות","time":9,"title":"פרק 3: סוגי משתנים"},{"content":"\n# הגדרת סביבת עבודה אופטימלית\n\nלמשך הקורס אנחנו נשתמש בתוכנה שמתאימה גם לווינדוס וגם למקינטוש והיא התוכנה שרוב המפתחים שפגשתי משתמשים:\n\n[Visual Studio code - לחצו להורדה](https://code.visualstudio.com/download)\n\nהתקנה רגילה, אין יותר מידי מה להסביר.  \nמבחינת מראה, אני אוהב להשתמש ב\"מצב לילה\":\n\n![מצב לילה](color-theme.png)\n\n**תוספים**  \nטוב אז כמו שיש חנות אפליקציות בטלפון שלכם, גם ב Vs Code יש חנות עם המון אפליקציות שכל מטרתן היא לשפר את החוויה שלנו, אז למה לא?  \n_ההורדה שלהן היא בגדר המלצה בלבד, מה שנוח לי לא בהכרח יהיה נוח לכם._  \nאז קודם כל איך ניגשים ל\"חנות האפליקציות\" שלנו:\n\n![תוספים](extension.png)\n\nבתור התחלה אמליץ על שני תוספים שיגרמו לקוד שלנו להראות טוב יותר:\n\n[Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme)\n\nוהתוסף השני:\n\n[Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n\nאם ההתקנה לא עובד לכם דרך הלינק, אפשר להיכנס לעמוד התוספים דרך ה vs code\nעצמו, לחפש את שני התוספים בשורת חיפוש ולהתקין.\n\nניצור תיקייה חדשה איפשהו במחשב, ונפתח אותה באמצעות ה vs code\n\n![פתיחת תיקיית הפרויקט](open-folder.png)\n\nכרגע אפשר ליצור קבצים עם סיומת (.js)  \nשכמובן מסמנים שזהו קובץ ג׳אווה סקריפט  \nרק למען התרגול ניצור גם קובץ (.html)\nשזו בעצם השפה שבה כתובים כל אתרי האינטרנט.  \nבאמצעות הכפתור הזה:\n\n![יצירת קובץ](create-file.png)\n\nבעצם התפקיד של js הוא ״להחיות״ את דפי האינטרנט.  \nמדפי אינטרנט סטטים ומשעממים, לדפי אינטרנט עם המון לוגיקה ודניאמיות!\n\nתיקיית הפרוייקט שלנו אמורה להיראות כך:\n\n![sasd](project-folder-finish.png)\n\nבגלל שאנחנו מדברים רק על js\nולא על html  \nאנחנו לא נתעמק בקוד ורק נעתיק אותו לתוך הקובץ עם סיומת ה (.html)  \n**לא להיבהל!**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- ככה רושמים הערות ! -->\n    <script src=\"./helloWorld.js\"></script>\n    <!-- Files are in the same folder -->\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n  </head>\n  <body></body>\n</html>\n```\n\nבעצם הדבר היחיד שמעניין אותנו הוא התאג:\n\n```html\n<script src=\"our file path!\"></script>\n```\n\nבעצם בתוך התאגית של הסקריפט יש לנו\nsrc\nשזה קיצור של source - מקור\nובתוך המירכאות אנחנו נשים לינק לקובץ הסקריפט שלנו שבעצם יופעל על אותו דף html  \nזו הדרך לקשר בין הסקריפט לתוכן העמוד!\n\nאגב אם נפתח קובץ מסוג (.html)\nונתחיל לרשום html\nאז ה vs code ישלים אותנו לצורה המקובל\nללא התג <script>\n\n![סניפט](html-snippet.png)\n\nhtml5  \nזו הגרסא החמישית של html והמקדמת ביותר  \nמי שרוצה להתעמק עוד ב html יכול ללמוד מפה:\n\n[קורס של קמפוס IL בחינם לגמרי!](https://campus.gov.il/course/ext-taasuka-html/)\n\nאז אנחנו נתחיל לשחק עם js\nונראה את המשתנה באמצעות אתר אינטרנט.  \nנתחיל ממש מהבסיס ונתקדם מהר מאוד!\n","slug":"chapter-4-vs-code","author":"דוד אבן חיים","date":"2021-05-19","image":"chapter-4-vs-code.jpg","isFeatured":false,"summary":"מהי סביבת העבודה האופטימאלית?","time":5,"title":"פרק 4: הגדרת סביבת עבודה"},{"content":"\n# תנאים בשפות תכנות\n\nלפני שנתחיל, נפתח את התיקייה שיצרנו בפרק הקודם  \nנלחץ פעמיים על קובץ ה html שיצרנו  \nוייפתח לנו דף אינטרנט ריק מתוכן, שבו נלחץ קליל ימני (איפשהו במסך)\nונלחץ כמו בתמונה:\n\n![צפייה בקונסול](inspect-element.png)\n\nלאחר מכן ייפתח לנו בצד הדף עמוד הבקרה ששם נעבור לעמודת ה console  \nבעצם כל פעם שנעשה שינוי בקבוץ js שלנו\nנוכל לראות את הפלט בעמודת הקונסול,\n**רק לאחר שנשמור את הקובץ ונעשה רענן בעמוד.**\n\nאחד הכלים הכי חשובים בתכנות הם התנאים.  \nאנחנו נשתמש בהם המון, והתנאי if נמצא בכל שפת תכנות וברובן הוא גם באותו מבנה.\nהמבנה:\n\n```js\nif ( התנאי עצמו ) {\n// do something here!\n// אם התנאי מתקיים אנחנו הקוד שנמצא פה ייתבצע!\n}\n```\n\nאז בעצם בתוך הסוגריים יש לנו תנאי שנבדק, אם הוא יחזיר אמת (תכף נראה דוגמא) הקומפיילר יפעיל את השורות שנמצאות בתוך הבלוק { ….. }\n\nאיך משתמשים?  \nאז כדי לאתחל משתנה השתמשנו ב ( = ) , אך כדי לבדוק את ערכו נשתמש ב ( == ).\n\n```js\nif (5 == 5) {\n  console.log(\"Hello World!\");\n}\nconsole.log(\"Always will run\");\n```\n\nאנחנו צריכים להבין שהשורה 5==5 מחזירה משהו.  \nבידיוק כמו שהקונסול החזיר\n**true**\nכאשר לחצנו אנטר, גם פה זה קורה.  \nאך זה קורה מאחורי הקלעים, ואם השורה הזו תחזיר אמת, הקוד שנמצא בתוך\n**הבלוק**\n(עוד נסביר על למה קוראים לזה בלוק)  \n שהוא בעצם כל מה שנמצא בין ה - { ... אני הבלוק... }\n\n_שימו לב שההדפסה שלאחר הבלוק תמיד תתבצע!_\n\n5 אכן שווה ל5 ולכן הקוד יופעל.\nמה ייקרה אם ננסה:\n\n```js\nif (5 === “5”) {\n...\n}\n```\n\nכבר ראינו דוגמה כזו, וראינו שהשורה הזו מחזירה\n**false**\nבגלל השוני בין סוגי המשתנים.  \nולכן הקוד שנמצא בתוך הבלוק לא יתבצע בכלל!  \nהקומפיילר ידלג עליו וימשיך מיד לאחר הסוגר {  \nאבל לא תמיד, אם נרצה שכאשר הבלוק של ה if\nלא מתבצע, במקומו יתבצע משהו אחר נוכל להשתמש בעוד מילה שמורה\n**else**\nובקוד זה נראה כך:\n\n```js\nlet number = 7;\n\nif (number > 10) {\n  console.log(\"number isbigger than 10\");\n} else {\n  console.log(\"number is smaller than 10\");\n}\n```\n\nפה השתמשנו בסימן גדול ( > )  \nשגם הוא יחזיר תשובה אמת או שקר, במקרה שלנו שקר.  \nכי 7 קטן מ 10\nולכן הבלוק של ה\n**if**\nלא יופעל\nורק הבלוק של ה\n**else**\nיופעל.  \nבמקרה שלנו תודפס הודעה מתאימה.\n\n_במערכת קוד אמיתית אפשר לחשוב על שימוש במקרה כזה כאשר למשתמש:_  \nיש 2 אפשרויות, לדוגמא: ״אישור״ ו ״ביטול״  \nמאמין שנתקלתם במקרה כזה מתישהו  \nאם המשתמש יילחץ אישור, נעשה ככה  \nואם המשתמש יילחץ ביטול, נעשה אחרת\n\nהוריאציה האחרונה של התנאים הוא התנאי:\n**else if**\nנחזור לדוגמא של המשתמש עם האפשרויות\nהפעם נחשוב על מצב שיש לנו 3 או יותר אפשרויות\n\n```js\nlet choice = \"ok\";\n\nif (choice === \"cancel\") {\n  // do something\n} else if (choice === \"ok\") {\n  // do something else\n} else {\n  // choice is not ok or cancel!\n}\n```\n\nבקטע קוד זה אנחנו בדוקים מה ערכו של choice  \nאם הוא cancel נכנס לבלוק הראשון  \nאם הוא ok אז נכנס לבלוק השני  \nואם הוא משהו אחר, כל דבר אחר, נכנס ל else\nהאחרון ורק קוד זה ירוץ!\n\n**מה יודפס למסך במצב הזה?**\n\n```js\nif (5 > 2) {\n  console.log(\"5 > 2\");\n} else if (5 > 4) {\n  console.log(\"5 > 4\");\n}\n```\n\nשני התנאים נכונים!\nאבל בכל זאת רק ההדפסה הראשונה התבצעה.  \nהסיבה היא פשוטה:  \nבגלל שהשתמשנו ב else if\nה״מנגנון״ שמנתח את הקוד שלנו, מעריך את ביטוי ה\n**if**\nהראשון שלנו, ואם הוא נכון, הוא לא ייבדוק את התנאי\n**else / else if**\nהאחרים, ולכן כשיש התאמה ראשונה הוא לא ימשיך לבדוק את התנאי.\n\nלמעשה סביר להניח שאם נרשום קוד כזה, נתקל\n**בטעות לוגית,**  \nכי אכן התנאי השני מתקיים אבל הקוד שבתוכו לא ייתבצע.  \nסביר להניח שרצינו לכתוב כך\n\n```js\nif (5 > 2) {\n  console.log(\"5 > 2\");\n}\nif (5 > 4) {\n  console.log(\"5 > 4\");\n}\n```\n\nאז מה קרה הפעם?  \nשני ההדפסות התבצעו!\nכי שני התנאים נכונים.  \nאבל בגלל שלא השתמשנו ב\n**else / else if**\n״המנגנון״ המשיך לנתח את התנאי הבא וביצע את הקוד.  \nעד עכשיו קראתי למה שמנתח את הקוד ״מנגנון״  \nהמילה הנכונה יותר היא ״קומפיילר״ - מְהַדֵּר בעברית  \nלמתעניינים:\n\n[קומפיילר בויקיפדיה](https://he.wikipedia.org/wiki/מהדר)\n","slug":"chapter-5-if-statement","author":"דוד אבן חיים","date":"2021-05-20","image":"chapter-5-if-statement.jpg","isFeatured":true,"summary":"גם בכתיבת קוד, יש תנאים","time":12,"title":"פרק 5: תנאים - חלק 1 "},{"content":"\n# המשך תנאים\n\nבגלל שתנאים הוא אחד מהמרכיבים הכי חשובים ושימושיים בשפת תכנות  \nנחלק את הנושא הזה לשתי פוסטים(היה אפשר גם יותר!)\n\nאז אם נרצה לבצע את שורת הקוד הזו:\n\n```js\nconst luckyNumber = 23;\nif(luckyNumber > 5) {\n    if(lucky number > 10) {\n        console.log(luckyNumber);\n    }\n}\n```\n\nבעצם רק אם מספר המזל שלי המשתנה:\n(luckyNumber)  \nיהיה גדול מ 5\n**וגם**\nגדול מ 10, יודפס המספר.\n\nאבל יש דרך יותר פשוטה לעשות זאת וללא שני בלוקים של\n_IF_\nבצורה הזו:\n\n```js\nconst lucyNumber = 23;\nif (luckyNumber > 5 && luckyNumber > 10) {\n  console.log(luckyNumber);\n}\n```\n\nבעצם השתמשנו ב\n**&&**\nשמשמעות\nand\nוגם\nרק אם מספר המזל שלנו יהיה גדול מ 5 וגם גדול מ 10\nהמספר יודפס למסך.\n\nב JS\nזה יהיה בידיוק אותו דבר כמו מה שרשמנו בהתחלה  \nלמה דווקא רשמתי ב JS?  \nכי כאשר יש מצב כזה:\n\n```js\nif( תנאי שני && תנאי ראשון) {\n    .. תעשה משהו\n}\n```\n\nאם התנאי הראשון יהיה\n**false**\nאז המנגנון שלנו בכל ללא יבדוק את התנאי השני! ויקפוץ ישר לסיום הבלוק.  \nבשונה משפות אחרות, שהביטוי כולו ייבדק ורק אז יוחזר הפלט.\n\nאגב, אם התנאי הראשון הוא אמת, המנגנון יחזיר את הערך של התנאי השני  \nטכניקה מוכרת בבניית אפליקציות דינאמיות:  \nשימוש ברכיב מסוים בתנאי ש..  \nוזה מתבצע כך:\n\n```js\n10 > 5 && console.log(\"hello world\");\n```\n\nבגלל ש 10 אכן גדול מ 5  \nאז הקומפיילר יחזיר את הרכיב שבא לאחר התנאי.  \nשבמקרה הזה הוא יהיה הדפסה.  \nבמקרה שבוא התנאי הראשון יהיה שקר, לא יוחזר כלום!\n\nאז כמו שיש לנו ערך\n**וגם**\nיש לנו גם\n**או**\nשמתבצע באמצעות:\n( || )\nנראה כך:\n\n```js\nconst luckyNumber = 23;\nif (luckyNumber > 10 || luckyNumber % 2 === 0) {\n  console.log(luckyNumber);\n}\n```\n\nמקודם רצינו ש\n**שני הערכים יהיו אמת**\nעכשיו מספיק\n**שרק אחד מהם**\nיהיה אמת.\n\n#### הסבר לגבי התנאי השני\n\nהתנאי היה:\n\n```js\nluckyNumber % 2 === 0;\n```\n\nמה זה אומר?  \nאז מי שלא מכיר, תכירו סימן חדש:\n**מודולו - שארית החילוק**  \nזאת אמרת, כאשר מבקשים\n_number % 2 === 0_  \nזה מקביל ללבקש שהמספר המסוים יהיה מספר זוגי.\n\nבדומה אם נרשום כך:\n\n```js\nluckyNumber % 2 !== 0;\n```\n\nאנחנו מבקשים ששארית החילוק ב - 2 של מספר המזל שלנו תהיה שונה מ - 0  \nמקביל ללבקש שמספר המזל יהיה אי-זוגי.\n\nלקריאה נוספת על סימנים לוגיים בויקיפדיה:\n[וגם](<https://he.wikipedia.org/wiki/וגם_(לוגיקה)>) ||\n[או](<https://he.wikipedia.org/wiki/או_(לוגיקה)>)\n","slug":"chapter-6-if-statement-2","author":"דוד אבן חיים","date":"2021-05-30","image":"chapter-6-if-statement-2.jpg","isFeatured":false,"summary":"יש הרבה מה לדבר על תנאים","time":8,"title":" פרק 6: תנאים - חלק 2"},{"content":"\n# מערכים\n\nמערך הוא לא סוג חדש של משתנה.  \nהוא משתנה שיכול להחזיק כמות בלתי מוגבלת של משתנים ומוגדר בצורה דומה (const/let) אך לאחר סימן ה\n**=**\nנפתח ב [.... ] כאשר במקום ה ( … ) יהיו משתנים שכל משתנה מופרד ב פסיק - ( , )  \n אחרי הדוגמא זה יהיה קצת יותר ברור.  \nמערך יכול להיות רשימה של כל המשתמשים שיש לנו באפליקציה מסוימת:\n\n```js\nlet usersInMyApp = [\"David\", \"Sharon\", \"Rebeca\"];\n```\n\nהמערך ראשון שלנו! מחזיק שלושה משתנים מסוג מחרוזת, שימו לב למבנה והדרך שבה מופרדים כל משתנה.\n\nמערך יכול להכיל כל סוג משתנה שלמדנו עד עכשיו:\n\n```js\nlet myArray = [4, 8, 15, 16, 23, \"David\", true, null];\n```\n\nמערך יכול להחזיק כמה סוגי משתנים ולא חייב שכל משתניו יהיו מסוג אחד  \nזה מאוד נדיר שנשתמש במערך עם כמה סוגי משתנים.\n\nהגישה לאיבר ספציפי במערך היא מאוד פשוטה.  \nצריך קודם להבין שלכל איבר במערך יש אינדקס, כאשר הספירה מתחילה מ 0 ולא מ 1!  \nזאת אומרת, האינדקס של האיבר הראשון יהיה תמיד 0.  \nאם נרצה להדפיס את האיבר הראשון במערך שבנינו, נעשה כך:\n\n```js\nconsole.log(myArray[0]);\n```\n\nשימו לב לצורת הכתיבה, נסו לגשת לעוד כמה איברים במערך.\n\nבנוסף לכך מערך יכול להחזיק מערך:\n\n```js\nlet myArray = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n```\n\nשימו לב להגדרה של המערך בכמה שורות נפרדות.  \nזה עדיין מערך אחד, וההגדרה שלו תסתיים\n_(בדומה לבלוק ה if )_\nרק כאשר נסגור את ה [ ]\nשפתחנו\n\nיהיו לנו עוד המון מה ללמוד על מערכים, אחד הטיפוסים הכי נפוצים בתוכנות.\n\nלדוגמא כאשר יש לנו מקבץ מידע גדול, מאותו סוג,כמו משתמשים באפליקציה.  \nלכל אפליקציה יש משתמשים ואפשר לשמור את כל משתמשי האפליקציה בתוך מערך,  \nכמובן שכמות המשתמשים הוא משתנה ולא ידוע מראש וכדי ״לטפל״ בכל המשתמשים נשתמש  \nבעוד משהו מאוד חשוב בתכנות - לולאות.  \nשזה בעצם הפרק הבא שלנו.\n","slug":"chapter-7-arrays","author":"דוד אבן חיים","date":"2021-06-01","image":"chapter-7-arrays.jpg","isFeatured":false,"summary":"החלק החשוב והמאתגר בשפות תכנות","time":13,"title":"פרק 7: מערכים"},{"content":"\n# לולאות\n\nאז בואו נגיד שיש לנו מערך של משתמשים, אותו אחד מהפרק הקודם.\n\n```js\nlet usersInMyApp = [\"David\", \"Sharon\", \"Rebeca\"];\n```\n\nכבר אמרנו שכמות המשתמשים משתנה!  \nאז כדי לדעת מה אורך המערך כרגע נשתמש\n**בפונקציה**\nבנויה ב\nJS\nלכל מערך יש אותה אז קבלו אותה:\n\n```js\nusersInMyApp.length;\n```\n\nlength - אורך באנגלית\nאז אם ננסה להדפיס את מה שהפעולה הזו\n**מחזירה**\nנראה שנקבל בדוגמא שלנו - 3.  \nמה הקאץ׳?  \nאם ננסה לגשת לאיבר במקום ה - 3 - נקבל שגיאה.  \nבמקרה הזה האיבר האחרון יהיה 2.  \nכי כמו שאמרנו האינדקס הראשון במערך מתחיל ב 0 ולא ב 1  \n:אז באותו עיקרון האינדקס האחרון של המערך יהיה\n\n```js\nusersInMyApp.length - 1;\n```\n\nטוב אז למה אני מדבר איתכם על מערכים כאשר הפרק עוסק בלולאות?  \nהאמת שרוב הפעמים שנשתמש בלולאות זה יהיה כדי לעשות פעולה כלשהי  \nעל מערך.  \nאז איך עושים את זה?  \nהכיר את for\n\n```js\nlet i;\nfor (i = 0; i < 5; i = i + 1) {\n  console.log(i);\n}\nconsole.log(\"Now i is: \", i);\n```\n\nנסו קודם להריץ את הקוד.\nמה קיבלנו?  \nבעצם ספרנו מ 0 ועד 4 בתוך הלולאה.  \nולאחר הלולאה, הדפסנו אינדקציה של ערכו של i  \n(שימו לב ל \" , \" שמפריד בין ה i לבין המחרוזת שכתבנו.)  \nוקיבלנו 5.  \nזו גם הסיבה שהלולאה נעצרה, נסביר בהמשך.\n\nאז בואו נדבר על ה -\n**for loop**  \nשימו לב קודם כל, שבתוך הסוגריים יש 3 חלקים שמופרדים באמצעות ( ; ).  \nלכל חלק יש תפקיד.\n\n1. החלק הראשון מבוצע אך ורק פעם אחת, בדרך כלל משמש כדי לאתחל משתנה שבו נשתמש כדי לרוץ כמות מסויימת על הלולאה.\n2. החלק השני מבוצע בכל פעם שמסתימת הלולאה\n   **וגם בפעם הראשונה שהקוד רץ**\n   ובעצם הוא התנאי לריצה של הלולאה.  \n   מגדיר עד מתי תרוץ הלולאה, במקרה שלנו, רק כאשר המשתנה\n   i\n   יגיע ל 5.\n\n3. רץ בכל פעם\n   **לאחר**\n   ריצת הלולאה. בדרך כלל משמש כדי לשנות את ערכו של המשתנה של הלולאה.\n   במקרה הזה, מקדם את המשתנה\n   i\n   באחד בכל סיום ריצת לולאה.\n\nלכל לולאה בדרך כלל יש משתנה, שמגדיר כמה פעמים הלולאה תרוץ.  \nבדרך כלל משתמשים באותיות:\n**i, j, k**\n\nבואו ננסה להדפיס את כל המשתמשים באפליקציה שלנו.  \nאז כדי לגשת למקום ספציפי במערך השתמשנו ב:\n\n```js\nusersInMyApp[0];\n```\n\nבדוגמא זו ניגשנו לאיבר הראשון.  \nמה נעשה כאשר נרצה לדוגמא להדפיס את כל האיברים במערך?\n\n```js\nlet usersInMyApp = [\"David\", \"Sharon\", \"Rebeca\"];\n\nfor (let i = 0; i < usersInMyApp.length; i++) {\n  console.log(usersInMyApp[i]);\n}\n```\n\nשימו לב שהפעם אתחלנו את המשתנה i\nבתוך החלק הראשון של הלולאה, בהמשך נלמד על ההבדל בין זה לדרך הקודמת.  \nאז בעצם בחלק השני של הלולאה, התנאי, אמרנו לקומפיילר לרוץ עד  \nשהאינדקס i\nיגיע לגודלו של המערך.  \nוככה בעצם רצים על מערך!  \nכדי לצבור עוד אינטואיציה, נסו לבצע עוד כמה לולאות עם הדפסות.\n\nאז כמו שהבנתם לולאות הם חלק מאוד חשוב בתכנות.  \nיש המון סוגים, שכל מטרתם הוא לעשות לנו את החיים קלים יותר!  \nאז הסוג השני של ה\n_for loop_\nנקרא\n_for of loop_\n\nעכשיו אנחנו נבצע בידיוק את אותו דבר כמו שעשינו, להדפיס את כל ערכי המערך.\n\n```js\nlet usersInMyApp = [\"David\", \"Sharon\", \"Rebeca\"];\n\nfor (user of usersInMyApp) {\n  console.log(user);\n}\n```\n\nזה בעצם ייתן לנו את אותו פלט, אך ללא הגדרה של משתני לולאה\n(i)\nובעצם משתנה הלולאה שלנו כרגע הוא\nuser\nשמייצג בכל איטרציה של הלולאה את ערך המערך בסדר עולה,  \nמהאינדקס\n**הראשון**\n-0  \nועד האינדקס\n**האחרון**\nכמו שלמדנו שהוא -\nusersInMyApp.length - 1\n","slug":"chapter-8-loops","author":"דוד אבן חיים","date":"2021-06-03","image":"chapter-8-loops.jpg","isFeatured":false,"summary":"","time":9,"title":"פרק 8: לולאות"},{"content":"\n# פונקציות\n\nאז פונקציות בשפת תכנות זה לא בדיוק מה שלמדנו כשהיינו בתיכון.  \nכן בפונקציה אנחנו יכולים (לא חייבים) לקבל קלט כלשהו, לבצע עליו חישוב מסוים ולהחזיר פלט.  \nפונקציות קיימות בכל שפת תכנות, אני אוהב להגדיר אותם בתור \"קוד מסוים שאני אקרא לו מתי וכמה פעמים שאני צריך\".  \nאני חייב להדגיש שכאשר אנחנו מגדירים פונקציה היא לא נקראת מיידית אלא נשמרת בזכרון ורק כאשר אנחנו נבצע קריאה לפונקציה - היא תופעל.\n\n### הגדרת פונקציה:\n\nיש כמה דרכים להגדיר פונקציה ב JS.  \nכרגע נעבור על הדרך הקלאסית, באמצעות המילה השמורה\n**function**\n\n```js\nfunction myFirstFunction(myName) {\n  //here is the body of the function\n}\n```\n\n_שימו לב!_  \nשם הפונקציה כמו שם משתנה (מתחיל באות קטנה וכו').  \nבתוך ה ( ) אלו הם הארגמונטים שהפונקציה מקבלת, הפונקציה הזו מקבלת ארגומנט אחד,  \nבשם myName.  \nמשתנה זה יהיה זמין\n**רק**\nבגוף הפונקציה.  \nכל מה שבין ה- { .. } הוא גוף הפונקציה , נקרא גם\n**Scope (נרחיב בהמשך!)**  \nפונקציה לא מסתיימת ב ; (אך יש מתכנתים שכן כותבים, אני לא רואה סיבה).\n\n_וידוי נאות:_  \n\\*לאורך המדריך תקבלו כמה וידויים מעניינים.  \n**לא חייב**\nלסיים כל שורה באמצעות ה - ( ; )\nJS לעומת שפות אחרות שבהן אכן חייב.\n\n### קריאה לפונקציה:\n\n```js\nconst name = \"David\";\nmyFirstFunction(name);\n```\n\nכמובן ששם המשתנה שאנחנו שולחים לפונקציה לא צריך להיות זהה למשתנה בהגדרת הפונקציה!  \nכרגע הפונקציה שלנו לא עושה כלום.  \nאז בואו נהפוך את הפונקציה לשימושית ונוסיף ל\n_גוף הפונקציה_\nפעולה מסוימת.  \nהפעם הפעולה תהיה להגיד שלום למשתנה שהפונקציה קיבלה!\n\n```js\nfunction myFirstFunction(myName) {\n  console.log(\"Hello\" + name);\n}\n```\n\nעכשיו כשיש לפונקציה מהות, בואו נקרא לה שוב.\n\n```js\nconst name = \"David\";\n\nmyFirstFunction(name);\n```\n\n**אז מה עשינו פה?**  \nכתבנו מחרוזת (כל החלק שמוקף במרכאות) ולאחריה הוספנו משתנה, אך חייב להפריד ביניהם, כרגע הפרדנו באמצעות ה \" , \" אך באותה מידה אפשר להשתמש ב \" + \".\nשימו לב! שקריאה לפונקציה חייבת להיות עם ( ) לאחר שם הפונקציה.  \n( גם כשהיא ללא ארגומנטים!! )\n\nהמילה השמורה\n**return**\nבדרך כלל נהוג לסיים פונקציות עם ערך החזרה באמצעות המילה,  \nנעשה זאת באמצעות\nה - return  \nדוגמא:\n\n```js\nfunction add(num1, num2) {\n  return num1 + num2;\n}\n```\n\nפונקציה זו תבצע פעולת חיבור בין שני משתנים ותחזיר את הערך של החיבור שלהם.  \n**לא רק מספרים אפשר לחבר!**\nנעבור על זה בהמשך.\n\nלא ייקרה כלום אם נקרא לפונקציה ככה:\n\n```js\nadd(1, 2);\n```\n\nהפונקציה הזו תחזיר את הערך 3 אבל הוא פשוט לא יישמר בשום מקום.  \nאפשר לשמור\n**ערך החזרה של הפונקציה**\nבמשתנה:\n\n```js\nconst returnValue = add(1, 2);\n```\n\n**מה שייקרה בעצם:**\n\n1. הקומפיילר ייקרא לפונקציה add.\n2. ישלח את הארגומנטים 1,2.\n3. יבצע את החישוב ויחזיר את הערך למשתנה שהגדרנו.\n\nאז בעצם זה בידיוק כמו לכתוב כך:\n\n```js\nconst returnValue = 1 + 2;\n```\n","slug":"chapter-9-functions","author":"דוד אבן חיים","date":"2021-06-03","image":"chapter-9-functions.jpg","isFeatured":true,"summary":"פונקציות - לא בידיוק מה שלמדנו בתיכון","time":11,"title":"פרק 9: פונקציות"}]},"__N_SSG":true}