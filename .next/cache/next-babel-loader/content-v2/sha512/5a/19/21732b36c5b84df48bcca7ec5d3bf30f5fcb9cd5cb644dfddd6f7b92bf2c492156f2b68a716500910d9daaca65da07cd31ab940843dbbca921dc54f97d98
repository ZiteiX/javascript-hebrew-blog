{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport routes from \"../components/routes\";\nimport matter from \"gray-matter\";\nconst postsDirectory = path.join(process.cwd() + routes.POST_CONTENT + \"/\");\nexport function getPostsFiles() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostData(postIdentifier) {\n  const slug = postIdentifier.replace(/\\.md$/, \"\"); // removes file extension.\n\n  const filePath = path.join(postsDirectory + `${slug}.md`);\n  const fileContent = fs.readFileSync(filePath, \"utf-8\");\n  const {\n    data,\n    content\n  } = matter(fileContent);\n\n  const postData = _objectSpread({\n    content,\n    slug\n  }, data);\n\n  return postData;\n}\nexport function getAllPosts() {\n  const postsFiles = getPostsFiles();\n  const allPosts = postsFiles.map(post => {\n    return getPostData(post);\n  });\n  const sortedPosts = allPosts.sort((postA, postB) => {\n    return postA.image.split(\"-\")[1] < postB.image.split(\"-\")[1] ? -1 : 1;\n  });\n  return sortedPosts;\n}\nexport function getFeaturedPosts() {\n  const allPosts = getAllPosts();\n  const featuredPosts = allPosts.filter(post => post.isFeatured);\n  return featuredPosts;\n}\nexport function getNextPost(slug) {\n  let nextPostSlug, nextPostNumber;\n  const number = slug.split(\"-\")[1];\n\n  if (!isNaN(number)) {\n    nextPostNumber = parseInt(number) + 1; // getting the next post.\n  }\n\n  const postsFiles = getPostsFiles();\n  nextPostSlug = postsFiles.find(post => {\n    const postNumber = post.split(\"-\")[1];\n\n    if (!isNaN(postNumber)) {\n      return parseInt(postNumber) === nextPostNumber;\n    }\n  });\n\n  if (!nextPostSlug) {\n    return \"finished\";\n  }\n\n  return nextPostSlug.replace(/\\.md$/, \"\"); // removes file extension. (.md)\n}","map":{"version":3,"sources":["/Users/davidabenhaim/Desktop/myBlog-nextJS/lib/posts-util.js"],"names":["fs","path","routes","matter","postsDirectory","join","process","cwd","POST_CONTENT","getPostsFiles","readdirSync","getPostData","postIdentifier","slug","replace","filePath","fileContent","readFileSync","data","content","postData","getAllPosts","postsFiles","allPosts","map","post","sortedPosts","sort","postA","postB","image","split","getFeaturedPosts","featuredPosts","filter","isFeatured","getNextPost","nextPostSlug","nextPostNumber","number","isNaN","parseInt","find","postNumber"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGH,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,KAAgBL,MAAM,CAACM,YAAvB,GAAsC,GAAhD,CAAvB;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC9B,SAAOT,EAAE,CAACU,WAAH,CAAeN,cAAf,CAAP;AACD;AAED,OAAO,SAASO,WAAT,CAAqBC,cAArB,EAAqC;AAC1C,QAAMC,IAAI,GAAGD,cAAc,CAACE,OAAf,CAAuB,OAAvB,EAAgC,EAAhC,CAAb,CAD0C,CACQ;;AAClD,QAAMC,QAAQ,GAAGd,IAAI,CAACI,IAAL,CAAUD,cAAc,GAAI,GAAES,IAAK,KAAnC,CAAjB;AACA,QAAMG,WAAW,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAApB;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBhB,MAAM,CAACa,WAAD,CAAhC;;AAEA,QAAMI,QAAQ;AACZD,IAAAA,OADY;AAEZN,IAAAA;AAFY,KAGTK,IAHS,CAAd;;AAMA,SAAOE,QAAP;AACD;AAED,OAAO,SAASC,WAAT,GAAuB;AAC5B,QAAMC,UAAU,GAAGb,aAAa,EAAhC;AAEA,QAAMc,QAAQ,GAAGD,UAAU,CAACE,GAAX,CAAgBC,IAAD,IAAU;AACxC,WAAOd,WAAW,CAACc,IAAD,CAAlB;AACD,GAFgB,CAAjB;AAGA,QAAMC,WAAW,GAAGH,QAAQ,CAACI,IAAT,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClD,WAAOD,KAAK,CAACE,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,IAA4BF,KAAK,CAACC,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAA5B,GAAwD,CAAC,CAAzD,GAA6D,CAApE;AACD,GAFmB,CAApB;AAIA,SAAOL,WAAP;AACD;AAED,OAAO,SAASM,gBAAT,GAA4B;AACjC,QAAMT,QAAQ,GAAGF,WAAW,EAA5B;AACA,QAAMY,aAAa,GAAGV,QAAQ,CAACW,MAAT,CAAiBT,IAAD,IAAUA,IAAI,CAACU,UAA/B,CAAtB;AAEA,SAAOF,aAAP;AACD;AAED,OAAO,SAASG,WAAT,CAAqBvB,IAArB,EAA2B;AAChC,MAAIwB,YAAJ,EAAkBC,cAAlB;AACA,QAAMC,MAAM,GAAG1B,IAAI,CAACkB,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAf;;AAEA,MAAI,CAACS,KAAK,CAACD,MAAD,CAAV,EAAoB;AAClBD,IAAAA,cAAc,GAAGG,QAAQ,CAACF,MAAD,CAAR,GAAmB,CAApC,CADkB,CACqB;AACxC;;AACD,QAAMjB,UAAU,GAAGb,aAAa,EAAhC;AACA4B,EAAAA,YAAY,GAAGf,UAAU,CAACoB,IAAX,CAAiBjB,IAAD,IAAU;AACvC,UAAMkB,UAAU,GAAGlB,IAAI,CAACM,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAnB;;AACA,QAAI,CAACS,KAAK,CAACG,UAAD,CAAV,EAAwB;AACtB,aAAOF,QAAQ,CAACE,UAAD,CAAR,KAAyBL,cAAhC;AACD;AACF,GALc,CAAf;;AAOA,MAAI,CAACD,YAAL,EAAmB;AACjB,WAAO,UAAP;AACD;;AAED,SAAOA,YAAY,CAACvB,OAAb,CAAqB,OAArB,EAA8B,EAA9B,CAAP,CAnBgC,CAmBU;AAC3C","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport routes from \"../components/routes\";\nimport matter from \"gray-matter\";\n\nconst postsDirectory = path.join(process.cwd() + routes.POST_CONTENT + \"/\");\n\nexport function getPostsFiles() {\n  return fs.readdirSync(postsDirectory);\n}\n\nexport function getPostData(postIdentifier) {\n  const slug = postIdentifier.replace(/\\.md$/, \"\"); // removes file extension.\n  const filePath = path.join(postsDirectory + `${slug}.md`);\n  const fileContent = fs.readFileSync(filePath, \"utf-8\");\n  const { data, content } = matter(fileContent);\n\n  const postData = {\n    content,\n    slug,\n    ...data,\n  };\n\n  return postData;\n}\n\nexport function getAllPosts() {\n  const postsFiles = getPostsFiles();\n\n  const allPosts = postsFiles.map((post) => {\n    return getPostData(post);\n  });\n  const sortedPosts = allPosts.sort((postA, postB) => {\n    return postA.image.split(\"-\")[1] < postB.image.split(\"-\")[1] ? -1 : 1;\n  });\n\n  return sortedPosts;\n}\n\nexport function getFeaturedPosts() {\n  const allPosts = getAllPosts();\n  const featuredPosts = allPosts.filter((post) => post.isFeatured);\n\n  return featuredPosts;\n}\n\nexport function getNextPost(slug) {\n  let nextPostSlug, nextPostNumber;\n  const number = slug.split(\"-\")[1];\n\n  if (!isNaN(number)) {\n    nextPostNumber = parseInt(number) + 1; // getting the next post.\n  }\n  const postsFiles = getPostsFiles();\n  nextPostSlug = postsFiles.find((post) => {\n    const postNumber = post.split(\"-\")[1];\n    if (!isNaN(postNumber)) {\n      return parseInt(postNumber) === nextPostNumber;\n    }\n  });\n\n  if (!nextPostSlug) {\n    return \"finished\";\n  }\n\n  return nextPostSlug.replace(/\\.md$/, \"\"); // removes file extension. (.md)\n}\n"]},"metadata":{},"sourceType":"module"}